# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:05:11+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AmazonResourceName(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class ConflictException(RootModel[Any]):
    root: Any


class DeleteSuiteDefinitionRequest(BaseModel):
    pass


class DeleteSuiteDefinitionResponse(BaseModel):
    pass


class DeviceUnderTest(BaseModel):
    certificateArn: Optional[AmazonResourceName] = None
    thingArn: Optional[AmazonResourceName] = None


class DeviceUnderTestList(RootModel[List[DeviceUnderTest]]):
    root: List[DeviceUnderTest] = Field(..., max_length=2, min_length=0)


class Endpoint(RootModel[constr(min_length=45, max_length=75)]):
    root: constr(min_length=45, max_length=75)


class ErrorReason(RootModel[str]):
    root: str


class Failure(RootModel[str]):
    root: str


class GetEndpointRequest(BaseModel):
    pass


class GetEndpointResponse(BaseModel):
    endpoint: Optional[Endpoint] = None


class GetSuiteDefinitionRequest(BaseModel):
    pass


class GetSuiteRunReportRequest(BaseModel):
    pass


class GetSuiteRunRequest(BaseModel):
    pass


class GroupName(RootModel[str]):
    root: str


class IntendedForQualificationBoolean(RootModel[bool]):
    root: bool


class InternalServerException(RootModel[Any]):
    root: Any


class IsLongDurationTestBoolean(RootModel[bool]):
    root: bool


class ListSuiteDefinitionsRequest(BaseModel):
    pass


class ListSuiteRunsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class LogUrl(RootModel[str]):
    root: str


class MaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class ParallelRun(RootModel[bool]):
    root: bool


class Protocol(Enum):
    MqttV3_1_1 = 'MqttV3_1_1'
    MqttV5 = 'MqttV5'


class QualificationReportDownloadUrl(RootModel[str]):
    root: str


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RootGroup(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class Status(Enum):
    PASS = 'PASS'
    FAIL = 'FAIL'
    CANCELED = 'CANCELED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    PASS_WITH_WARNINGS = 'PASS_WITH_WARNINGS'
    ERROR = 'ERROR'


class StopSuiteRunRequest(BaseModel):
    pass


class StopSuiteRunResponse(BaseModel):
    pass


class String128(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class String256(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class SuiteDefinitionName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class SuiteDefinitionVersion(RootModel[constr(min_length=2, max_length=255)]):
    root: constr(min_length=2, max_length=255)


class SuiteRunResultCount(RootModel[conint(ge=0, le=500)]):
    root: conint(ge=0, le=500)


class SuiteRunStatus(Enum):
    PASS = 'PASS'
    FAIL = 'FAIL'
    CANCELED = 'CANCELED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    PASS_WITH_WARNINGS = 'PASS_WITH_WARNINGS'
    ERROR = 'ERROR'


class SystemMessage(RootModel[str]):
    root: str


class TagKeyList(RootModel[List[String128]]):
    root: List[String128] = Field(..., max_length=50, min_length=0)


class TagMap(RootModel[Optional[Dict[str, String256]]]):
    root: Optional[Dict[str, String256]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class TagResourceResponse(BaseModel):
    pass


class TestCaseDefinitionName(RootModel[str]):
    root: str


class TestCaseScenarioId(RootModel[str]):
    root: str


class TestCaseScenarioStatus(Enum):
    PASS = 'PASS'
    FAIL = 'FAIL'
    CANCELED = 'CANCELED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    PASS_WITH_WARNINGS = 'PASS_WITH_WARNINGS'
    ERROR = 'ERROR'


class TestCaseScenarioType(Enum):
    Advanced = 'Advanced'
    Basic = 'Basic'


class Timestamp(RootModel[datetime]):
    root: datetime


class Token(RootModel[constr(max_length=2000)]):
    root: constr(max_length=2000)


class UUID(RootModel[constr(min_length=12, max_length=36)]):
    root: constr(min_length=12, max_length=36)


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateSuiteDefinitionResponse(BaseModel):
    createdAt: Optional[Timestamp] = None
    lastUpdatedAt: Optional[Timestamp] = None
    suiteDefinitionArn: Optional[AmazonResourceName] = None
    suiteDefinitionId: Optional[UUID] = None
    suiteDefinitionName: Optional[SuiteDefinitionName] = None
    suiteDefinitionVersion: Optional[SuiteDefinitionVersion] = None


class ValidationException(RootModel[Any]):
    root: Any


class Warnings(RootModel[str]):
    root: str


class SuiteDefinitionConfiguration1(BaseModel):
    devicePermissionRoleArn: Optional[AmazonResourceName] = None
    devices: Optional[DeviceUnderTestList] = None
    intendedForQualification: Optional[IntendedForQualificationBoolean] = None
    isLongDurationTest: Optional[IsLongDurationTestBoolean] = None
    protocol: Optional[Protocol] = None
    rootGroup: Optional[RootGroup] = None
    suiteDefinitionName: Optional[SuiteDefinitionName] = None


class SuiteDefinitionsPostRequest(BaseModel):
    suiteDefinitionConfiguration: SuiteDefinitionConfiguration1 = Field(
        ..., description='Gets the suite definition configuration.'
    )
    tags: Optional[Dict[str, String256]] = Field(
        None, description='The tags to be attached to the suite definition.'
    )


class SuiteDefinitionsSuiteDefinitionIdPatchRequest(BaseModel):
    suiteDefinitionConfiguration: SuiteDefinitionConfiguration1 = Field(
        ..., description='Gets the suite definition configuration.'
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, String256] = Field(
        ..., description='The tags to be attached to the IoT Device Advisor resource.'
    )


class TagKeys(RootModel[List[String128]]):
    root: List[String128] = Field(..., max_length=50, min_length=0)


class CreateSuiteDefinitionResponse(BaseModel):
    createdAt: Optional[Timestamp] = None
    suiteDefinitionArn: Optional[AmazonResourceName] = None
    suiteDefinitionId: Optional[UUID] = None
    suiteDefinitionName: Optional[SuiteDefinitionName] = None


class GetSuiteRunReportResponse(BaseModel):
    qualificationReportDownloadUrl: Optional[QualificationReportDownloadUrl] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class SelectedTestList(RootModel[List[UUID]]):
    root: List[UUID] = Field(..., max_length=100, min_length=0)


class StartSuiteRunResponse(BaseModel):
    createdAt: Optional[Timestamp] = None
    endpoint: Optional[Endpoint] = None
    suiteRunArn: Optional[AmazonResourceName] = None
    suiteRunId: Optional[UUID] = None


class SuiteDefinitionConfiguration(BaseModel):
    devicePermissionRoleArn: AmazonResourceName
    devices: Optional[DeviceUnderTestList] = None
    intendedForQualification: Optional[IntendedForQualificationBoolean] = None
    isLongDurationTest: Optional[IsLongDurationTestBoolean] = None
    protocol: Optional[Protocol] = None
    rootGroup: RootGroup
    suiteDefinitionName: SuiteDefinitionName


class SuiteDefinitionInformation(BaseModel):
    createdAt: Optional[Timestamp] = None
    defaultDevices: Optional[DeviceUnderTestList] = None
    intendedForQualification: Optional[IntendedForQualificationBoolean] = None
    isLongDurationTest: Optional[IsLongDurationTestBoolean] = None
    protocol: Optional[Protocol] = None
    suiteDefinitionId: Optional[UUID] = None
    suiteDefinitionName: Optional[SuiteDefinitionName] = None


class SuiteDefinitionInformationList(RootModel[List[SuiteDefinitionInformation]]):
    root: List[SuiteDefinitionInformation]


class SuiteRunConfiguration(BaseModel):
    parallelRun: Optional[ParallelRun] = None
    primaryDevice: DeviceUnderTest
    selectedTestList: Optional[SelectedTestList] = None


class SuiteRunInformation(BaseModel):
    createdAt: Optional[Timestamp] = None
    endAt: Optional[Timestamp] = None
    failed: Optional[SuiteRunResultCount] = None
    passed: Optional[SuiteRunResultCount] = None
    startedAt: Optional[Timestamp] = None
    status: Optional[SuiteRunStatus] = None
    suiteDefinitionId: Optional[UUID] = None
    suiteDefinitionName: Optional[SuiteDefinitionName] = None
    suiteDefinitionVersion: Optional[SuiteDefinitionVersion] = None
    suiteRunId: Optional[UUID] = None


class SuiteRunsList(RootModel[List[SuiteRunInformation]]):
    root: List[SuiteRunInformation]


class TestCaseScenario(BaseModel):
    failure: Optional[Failure] = None
    status: Optional[TestCaseScenarioStatus] = None
    systemMessage: Optional[SystemMessage] = None
    testCaseScenarioId: Optional[TestCaseScenarioId] = None
    testCaseScenarioType: Optional[TestCaseScenarioType] = None


class TestCaseScenariosList(RootModel[List[TestCaseScenario]]):
    root: List[TestCaseScenario]


class UpdateSuiteDefinitionRequest(BaseModel):
    suiteDefinitionConfiguration: SuiteDefinitionConfiguration


class SuiteRunConfiguration1(BaseModel):
    parallelRun: Optional[ParallelRun] = None
    primaryDevice: Optional[DeviceUnderTest] = None
    selectedTestList: Optional[SelectedTestList] = None


class SuiteDefinitionsSuiteDefinitionIdSuiteRunsPostRequest(BaseModel):
    suiteDefinitionVersion: Optional[constr(min_length=2, max_length=255)] = Field(
        None, description='Suite definition version of the test suite.'
    )
    suiteRunConfiguration: SuiteRunConfiguration1 = Field(
        ..., description='Gets suite run configuration.'
    )
    tags: Optional[Dict[str, String256]] = Field(
        None, description='The tags to be attached to the suite run.'
    )


class CreateSuiteDefinitionRequest(BaseModel):
    suiteDefinitionConfiguration: SuiteDefinitionConfiguration
    tags: Optional[TagMap] = None


class GetSuiteDefinitionResponse(BaseModel):
    createdAt: Optional[Timestamp] = None
    lastModifiedAt: Optional[Timestamp] = None
    latestVersion: Optional[SuiteDefinitionVersion] = None
    suiteDefinitionArn: Optional[AmazonResourceName] = None
    suiteDefinitionConfiguration: Optional[SuiteDefinitionConfiguration] = None
    suiteDefinitionId: Optional[UUID] = None
    suiteDefinitionVersion: Optional[SuiteDefinitionVersion] = None
    tags: Optional[TagMap] = None


class ListSuiteDefinitionsResponse(BaseModel):
    nextToken: Optional[Token] = None
    suiteDefinitionInformationList: Optional[SuiteDefinitionInformationList] = None


class ListSuiteRunsResponse(BaseModel):
    nextToken: Optional[Token] = None
    suiteRunsList: Optional[SuiteRunsList] = None


class StartSuiteRunRequest(BaseModel):
    suiteDefinitionVersion: Optional[SuiteDefinitionVersion] = None
    suiteRunConfiguration: SuiteRunConfiguration
    tags: Optional[TagMap] = None


class TestCaseRun(BaseModel):
    endTime: Optional[Timestamp] = None
    failure: Optional[Failure] = None
    logUrl: Optional[LogUrl] = None
    startTime: Optional[Timestamp] = None
    status: Optional[Status] = None
    testCaseDefinitionId: Optional[UUID] = None
    testCaseDefinitionName: Optional[TestCaseDefinitionName] = None
    testCaseRunId: Optional[UUID] = None
    testScenarios: Optional[TestCaseScenariosList] = None
    warnings: Optional[Warnings] = None


class TestCaseRuns(RootModel[List[TestCaseRun]]):
    root: List[TestCaseRun] = Field(..., description='Tests under each group result.')


class GroupResult(BaseModel):
    groupId: Optional[UUID] = None
    groupName: Optional[GroupName] = None
    tests: Optional[TestCaseRuns] = None


class GroupResultList(RootModel[List[GroupResult]]):
    root: List[GroupResult] = Field(..., description='Group Result list.')


class TestResult(BaseModel):
    groups: Optional[GroupResultList] = None


class GetSuiteRunResponse(BaseModel):
    endTime: Optional[Timestamp] = None
    errorReason: Optional[ErrorReason] = None
    startTime: Optional[Timestamp] = None
    status: Optional[SuiteRunStatus] = None
    suiteDefinitionId: Optional[UUID] = None
    suiteDefinitionVersion: Optional[SuiteDefinitionVersion] = None
    suiteRunArn: Optional[AmazonResourceName] = None
    suiteRunConfiguration: Optional[SuiteRunConfiguration] = None
    suiteRunId: Optional[UUID] = None
    tags: Optional[TagMap] = None
    testResult: Optional[TestResult] = None
